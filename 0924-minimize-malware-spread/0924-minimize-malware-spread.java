class Solution {
    int[] colors;
    int color = 0;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if(graph == null || graph.length == 0) return 0;
        
        int n = graph.length;
        
        
       
        colors = new int[n];
        Arrays.fill(colors,-1);
        
        for(int i = 0;i<n;i++)
        {
            if(colors[i]==-1){
                dfs(graph,i);
                color++;
            }
        }
        
        int[] groups = new int[color];
        int[] freq = new int[color];
        
        for(int i = 0;i<colors.length;i++)
        {
            groups[colors[i]]++;
        }
        
        for(int i = 0;i<initial.length;i++)
        {
            freq[colors[initial[i]]]++;
        }
        
        int ans = Integer.MAX_VALUE;
        
        for(int node: initial)
        {
            int c = colors[node];
            if(freq[c] == 1)
            {
                if(ans == Integer.MAX_VALUE) ans = node;
                else if(groups[c]>groups[colors[ans]]) ans = node;
                else if(groups[c] == groups[colors[ans]] && node<ans) ans = node;
            }
        }
        
        if (ans == Integer.MAX_VALUE)
            for (int node: initial)
                ans = Math.min(ans, node);

        return ans;
    }
    
    private void dfs(int[][] graph, int node)
    {
        //base
        colors[node] = color;
        
        for(int child = 0;child<graph.length;child++)
        {
            if(graph[node][child] == 1 && colors[child] == -1) dfs(graph,child);
        }
    }
}